module.exports = {    cheerio: require('cheerio'),    httpUtil: require('./HttpUtil'),    BiLuTvCom: function (data, callback) {        $ = this.cheerio.load(data);        var rs = $('.left-content-player  script').html();        callback(rs);    },    getContentUrl: function (url) {        console.log("getContentUrl:" + url);        var self = this;        //url = 'http://hdonline.vn/frontend/episode/xmlplay?ep=1&fid=14128&token=NmY1MjQyNDQ0YzMwNjM2YzMzNTg1NDZkNjI1ODRlNDc1NTMyNWE0YjYxNTg2MTRkMzM2YjU4MzU0NTY5NmY2YTM4NzczZDNk-1501811714&mirand=587c41a0cd52ad49975cf10ed87a9b02&_x=0.5166851091972489&format=json';        return self.httpUtil.request(url).then(function (body) {            //console.log("getContentUrl_body:" + body);            return body;        }).catch(function (err) {            return "";        });    },    getGroupsPhimBatHu: function (data) {        var self = this;        return new Promise(            function (resolve, reject) {                var groups = {groupsName: [], groupsHref: []};                try {                    $ = self.cheerio.load(data);                    var serversNode = $('.server-item');                    if (serversNode.length > 1)  {                        for (var i = 0; i < 2; i++) {                            groups.groupsName.push($(serversNode[i]).attr('name'));                            groups.groupsHref.push(i);                        }                    }                    resolve(groups);                } catch (e) {                    console.log("getGroupsPhimBatHu_error:" + e);                    reject([]);                }            }        )    },    getEpisodesPhimBatHu: function (data, groupIndex) {        var self = this;        //console.log("getEpisodesPhimBatHu:" + data);        return new Promise(function (resolve, reject) {            var episodes = {episodesName: [], episodesHref: []};            try {                $ = self.cheerio.load(data);                var serverNode = $(data).eq(groupIndex);                var episodesNode = $(serverNode).find('div');                for (var i = 0; i < episodesNode.length; i++) {                    var episodeName = $(episodesNode[i]).attr('name');                    episodes.episodesName.push(episodeName);                }                resolve(episodes);            } catch (e) {                console.log("getEpisodesPhimBatHu_error:" + e);                resolve([]);            }        })    },    getPlayerSettingPhimBatHu: function (data, groupIndex, episodeIndex) {        var self = this;        //console.log("getPlayerSettingPhimMoi:" + data);        return new Promise(function (resolve, reject) {            var setting = {'qualities': [], 'key': {}, status:'404', videoType:"mp4"};            try {                $ = self.cheerio.load(data);                var serverNode = $(data).eq(groupIndex);                var episodesNode = $(serverNode).find('div').eq(episodeIndex);                eval($(episodesNode).text());                setting.status = 'ok';                setting.key = serverNode.attr('data-id');                setting.qualities = playerSetting;                /*['mp4', 'drive', 'embed'].forEach(function(videoType, index) {                    var qualities = self.getQualitiesByTypeForPhimBatHu(playerSetting, videoType);                    if (qualities != '') {                        setting.videoType = videoType;                        setting.qualities.push(qualities);                    }                });*/                resolve(setting);            } catch (e) {                console.log("getPlayerSettingPhimMoi_error:" + e);                setting.status = '404';                resolve(setting);            }        })    },    getQualitiesByTypeForPhimBatHu: function(playerSetting, videoType) {        for(var i=0; i < playerSetting.length; i++){            var playerSettingItem = playerSetting[i];            for(var j=0; j < playerSettingItem.length; j++){                var type = playerSettingItem[j].type;                if (type == videoType) {                    return playerSettingItem;                }            }        }        return "";    },    getGroupsBiLuTv: function (data) {        var self = this;        return new Promise(            function (resolve, reject) {                var groups = {groupsName: [], groupsHref: []};                try {                    $ = self.cheerio.load(data);                    var serversNode = $('.choose-server a');                    for (var i = 0; i < serversNode.length; i++) {                        groups.groupsName.push($(serversNode[i]).text());                        groups.groupsHref.push($(serversNode[i]).attr('href'));                    }                    resolve(groups);                } catch (e) {                    reject([]);                }            }        )    },    getEpisodesBiLuTv: function (data) {        var self = this;        return new Promise(function (resolve, reject) {            var episodes = {episodesName: [], episodesHref: []};            try {                $ = self.cheerio.load(data);                var episodesNode = $('.list-episode a');                for (var i = 0; i < episodesNode.length; i++) {                    episodes.episodesName.push($(episodesNode[i]).text());                    episodes.episodesHref.push($(episodesNode[i]).attr('href'));                }                resolve(episodes);            } catch (e) {                resolve([]);            }        })    },    getPlayerSettingBiLuTv: function (data) {        var self = this;        return new Promise(function (resolve, reject) {            var setting = {'qualities': [], 'key': {}, status:'404'};            try {                $ = self.cheerio.load(data);                var rs = $('.left-content-player script').text();                if (rs.indexOf('playerSetting') != -1) {                    var sources = rs.split('$(document)')[0];                    eval(sources);                    if (playerSetting.sources.length > 0) setting.status = 'ok';                    setting.key = playerSetting.modelId;                    if (!Array.isArray(playerSetting.sources)) {                        playerSetting.sources = [{ file: playerSetting.sources }];                        setting.key = 'youtube';                    }                    setting.qualities.push(playerSetting.sources);                    if (typeof playerSetting.sourcesIP4 !== 'undefined') {                        setting.qualities.push(playerSetting.sourcesIP4);                    }                    if (typeof playerSetting.sourcesIP4Bk !== 'undefined') {                        setting.qualities.push(playerSetting.sourcesIP4Bk);                    }                    resolve(setting);                } else {                    rs = rs.split('var sources = ')[1];                    //var modelId = rs.match(/, [0-9]*\)/)[0].replace(/,|\)/g, '').trim();                    rs = rs.substr(0, rs.indexOf(';'))                        .replace(/decodeLink\(/g, '')                        .replace(/, [0-9]*\)/g, '');                    var sources = 'var playerSetting = {"sources":' + rs + '}';                    eval(sources);                    if (playerSetting.sources.length > 0) setting.status = 'ok';                    setting.key = playerSetting.modelId;                    if (!Array.isArray(playerSetting.sources)) {                        playerSetting.sources = [{ file: playerSetting.sources }];                        setting.key = 'youtube';                    }                    setting.qualities.push(playerSetting.sources);                    if (typeof playerSetting.sourcesIP4 !== 'undefined') {                        setting.qualities.push(playerSetting.sourcesIP4);                    }                    if (typeof playerSetting.sourcesIP4Bk !== 'undefined') {                        setting.qualities.push(playerSetting.sourcesIP4Bk);                    }                    resolve(setting);                }            } catch (e) {                setting.status = '404';                resolve(setting);            }        })    },    getGroupsPhimMoi: function (data) {        //console.log("getGroupsPhimMoi:" + data);        var self = this;        return new Promise(            function (resolve, reject) {                var groups = {groupsName: [], groupsHref: []};                try {                    $ = self.cheerio.load(data);                    var serversNode = $('.list-server .server-name');                    if (serversNode.length > 1)  {                        for (var i = 0; i < 2; i++) {                            groups.groupsName.push($(serversNode[i]).text().replace('SERVER QUỐC TẾ (', '').replace(')', ''));                            groups.groupsHref.push(i);                        }                    }                    resolve(groups);                } catch (e) {                    console.log("getGroupsPhimMoi_error:" + e);                    reject([]);                }            }        )    },    getEpisodesPhimMoi: function (data, groupIndex) {        var self = this;        //console.log("getEpisodesPhimMoi:" + data);        return new Promise(function (resolve, reject) {            var episodes = {episodesName: [], episodesHref: []};            try {                $ = self.cheerio.load(data);                var serverNode = $('.list-server ul').eq(groupIndex);                var episodesNode = $(serverNode).find('a');                for (var i = 0; i < episodesNode.length; i++) {                    var backupServer = $(episodesNode[i]).closest('.backup-server');                    var episodeName = $(episodesNode[i]).text();                    if (backupServer.length > 0) {                        episodeName = $(backupServer).find('h3').text();                    }                    episodes.episodesName.push(episodeName.replace(/\n/g, ''));                    episodes.episodesHref.push('http://phimmoi.net/' + $(episodesNode[i]).attr('href'));                }                resolve(episodes);            } catch (e) {                console.log("getEpisodesPhimMoi_error:" + e);                resolve([]);            }        })    },    getPlayerSettingPhimMoi: function (data, groupIndex, episodeIndex) {        var self = this;        //console.log("getPlayerSettingPhimMoi:" + data);        return new Promise(function (resolve, reject) {            var setting = {'qualities': [], 'key': {}, status:'404', videoType:""};            try {                var movieInfoUrlPhimMoi = self.buidMovieInfoUrlPhimMoi(data, groupIndex, episodeIndex);                self.getContentUrl(movieInfoUrlPhimMoi).then(function(rs) {                    var sources = rs.split('if(typeof')[0]                        .replace('jQuery.parseJSON', 'JSON.parse')                        .replace('_responseData', 'playerSetting')                        .replace(/"url"/g, '"file"')                        .replace(/"resolution"/g, '"label"');                    eval(sources);                    if (playerSetting.medias.length > 0) setting.status = 'ok';                    setting.videoType = "mp4";                    setting.key = playerSetting.episodeId;                    setting.qualities.push(playerSetting.medias);                    resolve(setting);                });            } catch (e) {                console.log("getPlayerSettingPhimMoi_error:" + e);                setting.status = '404';                resolve(setting);            }        })    },    getQualitiesFromGoogleDrive: function (driveDocId) {        var self = this;        var driveDocUrl = "https://docs.google.com/get_video_info?docid=" + driveDocId;        return new Promise(function (resolve, reject) {            try {                self.getContentUrl(driveDocUrl).then(function(rs) {                    resolve(rs);                });            } catch (e) {                reject(e);            }        })    },    buidMovieInfoUrlPhimMoi: function(data, groupIndex, episodeIndex) {        // example link : http://episode.phimmoi.net/episodeinfo-v1.1.php?episodeid=120628&number=1&filmid=5340&filmslug=phim/7-ngay-lam-vuong-hau-i2-5340/&type=javascript        var self = this;        if (data.indexOf('episodeinfo') > 0) {            return data;        } else {            $ = self.cheerio.load(data);            var serverNode = $('.list-server ul').eq(groupIndex);            var episodeNode = $(serverNode).find('a').eq(episodeIndex);            var episodeId = $(episodeNode).attr('data-episodeid');            var number = $(episodeNode).attr('data-number');            var part = $(episodeNode).attr('data-part');            var hrefInfo = $(episodeNode).attr('href').split('/');            var filmslug = hrefInfo[1];            var filmid = filmslug.split('-')[filmslug.split('-').length - 1];            return "http://episode.phimmoi.net/episodeinfo-v1.1.php?episodeid=" + episodeId + "&number=" + number + "&part=" + part + "&filmid=" + filmid + "&filmslug=phim/" + filmslug + "/&type=javascript";        }    },    getGroupsTvHay: function (data) {        return new Promise(            function (resolve, reject) {                var groups = {groupsName: [], groupsHref: []};                try {                    groups.groupsName.push("server 1");                    groups.groupsHref.push("server 1");                    resolve(groups);                } catch (e) {                    reject([]);                }            }        )    },    getEpisodesTvHay: function (data) {        var self = this;        return new Promise(function (resolve, reject) {            var episodes = {episodesName: [], episodesHref: []};            try {                $ = self.cheerio.load(data);                var episodesNode = $('a');                for (var i = 0; i < episodesNode.length; i++) {                    episodes.episodesName.push($(episodesNode[i]).text());                    episodes.episodesHref.push($(episodesNode[i]).attr('href'));                }                resolve(episodes);            } catch (e) {                resolve([]);            }        })    },    getPlayerPlayerSettingBySocket: function (movieHref) {        var self = this;        return new Promise(function (resolve, reject) {            var setting = {qualities: [            	            	            ], 'key': {}, status:'404', videoType:""};            try {            	global.ws.broadcast(movieHref);            	global.ws.connection.on('message', function(message) {                    console.log('recive direct link: ' + message);                    setting.status = 'ok';                    setting.videoType = "mp4";                    setting.key = "khong biet";                    setting.qualities.push(                    		[{file:message, label:'HD'}]                		);                    resolve(setting);                });            } catch (e) {                console.log("getPlayerSettingTvHay_error:" + e);                setting.status = '404';                resolve(setting);            }        })    },    clipVn: function (data, callback) {        $ = this.cheerio.load(data);        var rs = $('.box-content script').html().split(';')[2];        rs = rs.substring(rs.indexOf("file"), (rs.indexOf(".mp4") + 4));        rs = rs.substring(rs.indexOf("http"));        callback(rs);    },    megashare9: function (data, callback) {        $ = this.cheerio.load(data);        rs = $('source').attr('src');        callback(rs);    },    clone: function (a) {        return JSON.parse(JSON.stringify(a));    }}